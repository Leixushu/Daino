
#include "DAINO.h"




//-------------------------------------------------------------------------------------------------------
// Function    :  Int_Quadratic
// Description :  Perform spatial interpolation based on the quadratic interpolation
//
// Note        :  a. The spatial disribution is approximated by a parabola in each direction
//                b. The interpolation result is neither conservative nor monotonic
//
// Parameter   :  CData     : The input coarse-grid array 
//                CSize     : The size of the CData array
//                CStart    : The (x,y,z) starting indices to perform interpolation on the CData array
//                CRange    : The number of grids in each direction to perform interpolation
//                FData     : The output fine-grid array
//                FStart    : The (x,y,z) starting indcies to store the interpolation results
//                NComp     : The number of components in the CData and FData array
//-------------------------------------------------------------------------------------------------------
void Int_Quadratic( const real CData [], const int CSize[3], const int CStart[3], const int CRange[3],
                          real FData [], const int FSize[3], const int FStart[3], const int NComp )
{

   const real Mp[3]  = { -3.0/32.0, +30.0/32.0, +5.0/32.0 };
   const real Mm[3]  = { +5.0/32.0, +30.0/32.0, -3.0/32.0 };

   const int Cdx     = 1;
   const int Cdy     = CSize[0];
   const int Cdz     = CSize[0]*CSize[1];

   const int Fdx     = 1;
   const int Fdy     = FSize[0];
   const int Fdz     = FSize[0]*FSize[1];

   int CID, FID, CID0, FID0, CID2, Idx, Idy, Idz, ii, jj, kk;


   for (int v=0; v<NComp; v++ )
   {
      CID0 = v*CSize[0]*CSize[1]*CSize[2];
      FID0 = v*FSize[0]*FSize[1]*FSize[2];

      for (int Cz=CStart[2], Fz=FStart[2]; Cz<CStart[2]+CRange[2]; Cz++, Fz+=2 )
      for (int Cy=CStart[1], Fy=FStart[1]; Cy<CStart[1]+CRange[1]; Cy++, Fy+=2 )
      for (int Cx=CStart[0], Fx=FStart[0]; Cx<CStart[0]+CRange[0]; Cx++, Fx+=2 )
      {
         CID = CID0 + Cz*Cdz + Cy*Cdy + Cx*Cdx;
         FID = FID0 + Fz*Fdz + Fy*Fdy + Fx*Fdx;

         FData[FID            ] = (real)0.0;
         FData[FID        +Fdx] = (real)0.0;
         FData[FID    +Fdy    ] = (real)0.0;
         FData[FID    +Fdy+Fdx] = (real)0.0;
         FData[FID+Fdz        ] = (real)0.0;
         FData[FID+Fdz    +Fdx] = (real)0.0;
         FData[FID+Fdz+Fdy    ] = (real)0.0;
         FData[FID+Fdz+Fdy+Fdx] = (real)0.0;

         for (int dk=-1; dk<=1; dk++)  {  Idz = dk+1;    kk = dk*Cdz;
         for (int dj=-1; dj<=1; dj++)  {  Idy = dj+1;    jj = dj*Cdy;
         for (int di=-1; di<=1; di++)  {  Idx = di+1;    ii = di*Cdx;

            CID2 = CID + ii + jj + kk;

            FData[FID            ] += CData[CID2] * Mm[Idz] * Mm[Idy] * Mm[Idx];
            FData[FID        +Fdx] += CData[CID2] * Mm[Idz] * Mm[Idy] * Mp[Idx];
            FData[FID    +Fdy    ] += CData[CID2] * Mm[Idz] * Mp[Idy] * Mm[Idx];
            FData[FID    +Fdy+Fdx] += CData[CID2] * Mm[Idz] * Mp[Idy] * Mp[Idx];
            FData[FID+Fdz        ] += CData[CID2] * Mp[Idz] * Mm[Idy] * Mm[Idx];
            FData[FID+Fdz    +Fdx] += CData[CID2] * Mp[Idz] * Mm[Idy] * Mp[Idx];
            FData[FID+Fdz+Fdy    ] += CData[CID2] * Mp[Idz] * Mp[Idy] * Mm[Idx];
            FData[FID+Fdz+Fdy+Fdx] += CData[CID2] * Mp[Idz] * Mp[Idy] * Mp[Idx];

         }}} 

      } // z,y,z
   } // for ( v=0; v<NComp; v++ )

}



